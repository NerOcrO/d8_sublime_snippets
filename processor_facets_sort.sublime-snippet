<snippet>
  <content><![CDATA[

namespace Drupal\\${1:MODULE}\Plugin\facets\processor;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\facets\Processor\SortProcessorInterface;
use Drupal\facets\Processor\SortProcessorPluginBase;
use Drupal\facets\Result\Result;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Trie [DESCRIPTION].
 *
 * @FacetsProcessor(
 *   id = "${1:MODULE}_[MACHINE_NAME]",
 *   label = @Translation("[PROJECT_NAME] : [LABEL]"),
 *   description = @Translation("Trie [DESCRIPTION]."),
 *   default_enabled = TRUE,
 *   stages = {
 *     "sort" = 40
 *   }
 * )
 */
class ${TM_FILENAME/(\w+)\.php/\1/g} extends SortProcessorPluginBase implements SortProcessorInterface, ContainerFactoryPluginInterface {

  /**
   * The entity type manager service.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected \$entityTypeManager;

  /**
   * Constructs a facets sort processor instance.
   *
   * @param array \$configuration
   *   A configuration array containing information about the plugin instance.
   * @param string \$plugin_id
   *   The plugin_id for the plugin instance.
   * @param mixed \$plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface \$entity_type_manager
   *   The entity type manager service.
   */
  public function __construct(array \$configuration, \$plugin_id, \$plugin_definition, EntityTypeManagerInterface \$entity_type_manager) {
    parent::__construct(\$configuration, \$plugin_id, \$plugin_definition);
    \$this->entityTypeManager = \$entity_type_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface \$container, array \$configuration, \$plugin_id, \$plugin_definition) {
    return new static(
      \$configuration,
      \$plugin_id,
      \$plugin_definition,
      \$container->get('entity_type.manager')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return ['sort' => 'ASC'];
  }

  /**
   * {@inheritdoc}
   */
  public function sortResults(Result \$a, Result \$b) {
    \$storage = \$this->entityTypeManager->getStorage('taxonomy_term');

    /** @var Drupal\taxonomy\TermInterface \$term_a */
    \$term_a = \$storage->load(\$a->getRawValue());
    /** @var Drupal\taxonomy\TermInterface \$term_b */
    \$term_b = \$storage->load(\$b->getRawValue());

    if (\$term_a->field_poids->value == \$term_b->field_poids->value) {
      return 0;
    }
    return (\$term_a->field_poids->value < \$term_b->field_poids->value) ? -1 : 1;
  }

}

]]></content>
  <tabTrigger>d8processor_facets_sort</tabTrigger>
  <scope>source.php</scope>
  <description>D8 processor facets sort</description>
</snippet>
