<snippet>
  <content><![CDATA[

namespace Drupal\\${1:MODULE}\Plugin\search_api\processor;

use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\search_api\Datasource\DatasourceInterface;
use Drupal\search_api\Item\ItemInterface;
use Drupal\search_api\Processor\ProcessorPluginBase;
use Drupal\search_api\Processor\ProcessorProperty;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Indexe [DESCRIPTION].
 *
 * @SearchApiProcessor(
 *   id = "${1:MODULE}_[MACHINE_NAME]",
 *   label = @Translation("[PROJECT_NAME] : [LABEL]"),
 *   description = @Translation("Indexe [DESCRIPTION]."),
 *   stages = {
 *     "add_properties" = 0,
 *   },
 *   locked = true,
 * )
 */
class ${TM_FILENAME/(\w+)\.php/\1/g} extends ProcessorPluginBase implements ContainerFactoryPluginInterface {

  /**
   * Constructs a search_api processor instance.
   *
   * @param array \$configuration
   *   A configuration array containing information about the plugin instance.
   * @param string \$plugin_id
   *   The plugin_id for the plugin instance.
   * @param mixed \$plugin_definition
   *   The plugin implementation definition.
   */
  public function __construct(array \$configuration, \$plugin_id, \$plugin_definition) {
    parent::__construct(\$configuration, \$plugin_id, \$plugin_definition);
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface \$container, array \$configuration, \$plugin_id, \$plugin_definition) {
    return new static(
      \$configuration,
      \$plugin_id,
      \$plugin_definition
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getPropertyDefinitions(DatasourceInterface \$datasource = NULL) {
    \$properties = [];

    if (!\$datasource) {
      \$definition = [
        'label' => \$this->t('[LABEL]'),
        'description' => \$this->t('Indexe [DESCRIPTION].'),
        'type' => 'string',
        'processor_id' => \$this->getPluginId(),
      ];
      \$properties['${1:MODULE}_[MACHINE_NAME]'] = new ProcessorProperty(\$definition);
    }

    return \$properties;
  }

  /**
   * {@inheritdoc}
   */
  public function addFieldValues(ItemInterface \$item) {
    \$fields = \$this->getFieldsHelper()->filterForPropertyPath(\$item->getFields(), NULL, \$this->getPluginId());
    /** @var \Drupal\Core\Entity\EntityInterface \$object */
    \$object = \$item->getOriginalObject()->getValue();
    \$bundle = \$object->bundle();

    /** @var \Drupal\search_api\Item\FieldInterface \$field */
    foreach (\$fields as \$field) {
      \$field->addValue(\$value);
    }
  }

}

]]></content>
  <tabTrigger>processor_search_api</tabTrigger>
  <scope>source.php</scope>
  <description>D8 processor search_api</description>
</snippet>
