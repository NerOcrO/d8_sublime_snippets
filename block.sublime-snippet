<snippet>
    <content><![CDATA[

namespace Drupal\\${1:MODULE}\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * [DESCRIPTION].
 *
 * @Block(
 *  id = "${1:MODULE}_[MACHINE_NAME]",
 *  admin_label = @Translation("[PROJECT_NAME] : [LABEL]"),
 * )
 */
class ${TM_FILENAME/(\w+)\.php/\1/g} extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * Constructs a new block instance.
   *
   * @param array \$configuration
   *   The plugin configuration, i.e. an array with configuration values keyed
   *   by configuration option name. The special key 'context' may be used to
   *   initialize the defined contexts by setting it to an array of context
   *   values keyed by context names.
   * @param string \$plugin_id
   *   The plugin ID for the plugin instance.
   * @param mixed \$plugin_definition
   *   The plugin implementation definition.
   */
  public function __construct(array \$configuration, \$plugin_id, \$plugin_definition) {
    parent::__construct(\$configuration, \$plugin_id, \$plugin_definition);
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface \$container, array \$configuration, \$plugin_id, \$plugin_definition) {
    return new static(
      \$configuration,
      \$plugin_id,
      \$plugin_definition
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheContexts() {
    return ['url'];
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    return [];
  }

}

]]></content>
    <tabTrigger>d8block</tabTrigger>
    <scope>source.php</scope>
    <description>D8 block</description>
</snippet>
