<snippet>
    <content><![CDATA[

namespace Drupal\\${1:MODULE}\Plugin\Field\FieldFormatter;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * [DESCRIPTION].
 *
 * @FieldFormatter(
 *   id = "${1:MODULE}_[MACHINE_NAME]",
 *   label = @Translation("[PROJECT_NAME] : [LABEL]"),
 *   field_types = {
 *     "[FIELD_TYPE]"
 *   }
 * )
 */
class [CLASS_NAME]Formatter extends FormatterBase implements ContainerFactoryPluginInterface {

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected \$entityTypeManager;

  /**
   * Constructs a FormatterBase object.
   *
   * @param string \$plugin_id
   *   The plugin_id for the formatter.
   * @param mixed \$plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Field\FieldDefinitionInterface \$field_definition
   *   The definition of the field to which the formatter is associated.
   * @param array \$settings
   *   The formatter settings.
   * @param string \$label
   *   The formatter label display setting.
   * @param string \$view_mode
   *   The view mode.
   * @param array \$third_party_settings
   *   Any third party settings.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface \$entity_type_manager
   *   The entity type manager.
   */
  public function __construct(\$plugin_id, \$plugin_definition, FieldDefinitionInterface \$field_definition, array \$settings, \$label, \$view_mode, array \$third_party_settings, EntityTypeManagerInterface \$entity_type_manager) {
    parent::__construct(\$plugin_id, \$plugin_definition, \$field_definition, \$settings, \$label, \$view_mode, \$third_party_settings);
    \$this->entityTypeManager = \$entity_type_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface \$container, array \$configuration, \$plugin_id, \$plugin_definition) {
    return new static(
      \$plugin_id,
      \$plugin_definition,
      \$configuration['field_definition'],
      \$configuration['settings'],
      \$configuration['label'],
      \$configuration['view_mode'],
      \$configuration['third_party_settings'],
      \$container->get('entity_type.manager')
    );
  }

  /**
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return [

    ];
  }

  /**
   * {@inheritdoc}
   */
  public function settingsForm(array \$form, FormStateInterface \$form_state) {
    return [

    ];
  }

  /**
   * {@inheritdoc}
   */
  public function settingsSummary() {
    \$settings = \$this->getSettings();

    return [

    ];
  }

  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface \$items, \$langcode) {
    \$elements = [];

    foreach (\$items as \$delta => \$item) {
      \$elements[\$delta] = [

      ];
    }

    return \$elements;
  }

}

]]></content>
    <tabTrigger>d8field_formatter</tabTrigger>
    <scope>source.php</scope>
    <description>D8 field formatter</description>
</snippet>
